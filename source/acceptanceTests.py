import traci

from models.WarningLogic import WarningLogic
from models.Vehicle import Vehicle
from models.RoadsideUnit import RoadsideUnit


def extractVehicleInfo(traci):
    return [Vehicle(traci, vehicle_id) for vehicle_id in traci.vehicle.getIDList()]


def BusApproacingEmptyJunction():
    """
        Given an empty junction
        When a bus crosses the junction
        Then no warning is generated by the warning system.
    """
    # Given
    traci.start(["sumo", "-c", "../intersection/emptyJunction/cross.sumocfg"])
    warningLogic = WarningLogic()
    # When
    traci.vehicle.add("bus", "SW-to-NE", typeID="bus")
    # Then
    while (traci.simulation.getMinExpectedNumber() > 0):
        traci.simulationStep()
        vehicles = extractVehicleInfo(traci)
        assert (warningLogic.isDangerous(vehicles) == False), "Warning should have NOT been generated by warning system!"
    traci.close()


def BusAndBicycleApproachingJunction():
    """
        Given a bicycle is approaching the intersection
        When a bus approaches the junction
        Then warning is generated by the warning system.
    """
    # Given
    traci.start(["sumo", "-c", "../intersection/emptyJunction/cross.sumocfg"])
    warningLogic = WarningLogic()    
    traci.vehicle.add("bicycle1", "W-to-intersection", typeID="bicycle")
    # When
    traci.vehicle.add("bus1", "SW-to-intersection", typeID="bus")
    # Then
    traci.simulationStep()
    while (traci.simulation.getMinExpectedNumber() >= 2):
        vehicles = extractVehicleInfo(traci)
        assert (warningLogic.isDangerous(vehicles) == True), "Warning should have been generated by warning system!"
        traci.simulationStep()
    traci.close()


def BusApproachingAndBicycleLeavingJunction():
    """
        Given a bicycle is leaving the intersection
        When a bus approaches the junction
        Then no warning is generated by the warning system.
    """
    # Given
    traci.start(["sumo", "-c", "../intersection/emptyJunction/cross.sumocfg"])
    warningLogic = WarningLogic()
    traci.vehicle.add("bicycle1", "intersection-to-E", typeID="bicycle")
    # When
    traci.vehicle.add("bus1", "SW-to-intersection", typeID="bus")
    # Then
    while (traci.simulation.getMinExpectedNumber() > 0):
        traci.simulationStep()
        vehicles = extractVehicleInfo(traci)
        assert (warningLogic.isDangerous(vehicles) == False), "Warning should NOT have been generated by warning system!"
    traci.close()

# User Story CMOB-28
BusApproacingEmptyJunction()

# User Story CMOB-29
BusAndBicycleApproachingJunction()
BusApproachingAndBicycleLeavingJunction()

print("------------------------")
print("Acceptance Tests Passed!")
print("------------------------")

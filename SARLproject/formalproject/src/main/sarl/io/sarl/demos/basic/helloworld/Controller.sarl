package io.sarl.demos.basic.helloworld

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.DefaultContextInteractions
import java.util.ArrayList
import java.util.List
import io.sarl.demos.basic.helloworld.events.RSUConnect
import io.sarl.demos.basic.helloworld.events.CameraConnect
import io.sarl.demos.basic.helloworld.events.OBUConnect
import io.sarl.demos.basic.helloworld.events.OBUDisconnect
import it.polito.appeal.traci.SumoTraciConnection
import io.sarl.demos.basic.helloworld.events.WarnOBU
import io.sarl.demos.basic.helloworld.events.WarnRSU
import io.sarl.demos.basic.helloworld.events.ClearRSU
import io.sarl.demos.basic.helloworld.events.SendAllDataCamera
import java.util.HashMap
import io.sarl.demos.basic.helloworld.events.tempClean

@SuppressWarnings("discouraged_occurrence_readonly_use", "unused_agent_capacity", "discouraged_reference")
agent Controller {

	var allRSU : List<RSU> = new ArrayList<RSU>() //all *RSU* that are connected to the *Controller*
	var allCamera : List<Camera> = new ArrayList<Camera>() // all *Camera* that are connected to the *Controller*
	var allOBU : List<String> = new ArrayList<String>() // all *OBU* that are connected to the *Controller*
	
	var bicycleSeconds : HashMap<String, Double> = new HashMap<String, Double>()
	
	var conn : SumoTraciConnection
	
	uses DefaultContextInteractions

	on Initialize  {
		this.conn = occurrence.parameters.get(0) as SumoTraciConnection		
		println("Controller spawned!")			
	}

	on Destroy {
		println("Controller destroyed")
	}

	on SendAllDataCamera {
		//Warning RSU		
		var vehicle_data : HashMap<String, HashMap<String, Object>> = occurrence.veh_info
		if(vehicle_data.isEmpty()){
			emit(new ClearRSU("East"))
		} else {
			warningRSU(vehicle_data)
			warningOBU(vehicle_data)
		}	
	}

	def warningRSU(vehicle_data : HashMap<String, HashMap<String, Object>>) {
		var bus_flag : boolean = false
		var def_distance = 32

		for (vehID : vehicle_data.keySet) {
			var distance = vehicle_data.get(vehID).get("distance") as Double
			var veh_type = vehicle_data.get(vehID).get("type") as String
			if (veh_type == "bus") {
				bus_flag = true
				if (distance < def_distance) {
					emit(new WarnRSU("East"))
				}
			}
		}
		if (bus_flag == false) {
			emit(new ClearRSU("East"))
		}
	}

	def warningOBU (vehicle_data : HashMap<String, HashMap<String, Object>>) {	
		var bus_flag : boolean = false
		var bicycle_flag : boolean = false
		
		var vehicleType : String
		var vehicleSecond : double
		var vehicleDistance : double
		var vehicleSpeed : double
		var vehicleLength : double
		
		var extraSecond : double		


		var busIDList : List<String> = new ArrayList<String>()
				
		for (vehicleID : vehicle_data.keySet) {

			vehicleType = vehicle_data.get(vehicleID).get("type") as String
			vehicleSecond = vehicle_data.get(vehicleID).get("seconds") as Double
			vehicleDistance = vehicle_data.get(vehicleID).get("distance") as Double

			vehicleSpeed = vehicle_data.get(vehicleID).get("speed") as Double
			vehicleLength = vehicle_data.get(vehicleID).get("length") as Double

			extraSecond = vehicleSecond + (vehicleLength / vehicleSpeed)
			
						
			//BICYCLE
			if (vehicleType.contains("bicycle") && vehicleSecond <= 3.5 && vehicleDistance >= 2.0) {

				this.bicycleSeconds.put(vehicleID, vehicleSecond)
				// println(vehicleID + " : " + vehicleSecond)
				bicycle_flag = true
				
			} else if (vehicleType.contains("bicycle") && vehicleDistance < 2.0) {
				this.bicycleSeconds.remove(vehicleID)
				
			}
			
			//BUS
			if (vehicleType.equals("bus") && vehicleSecond <= 3.5 && vehicleDistance >= 4.0) {
				for (vs : this.bicycleSeconds.values) {				
					if ((almostEqual(vehicleSecond, vs, 0.75) ||
						almostEqual(extraSecond, vs, 0.75)) || (vs > vehicleSecond && vs < extraSecond)){
						busIDList.add(vehicleID)
						bus_flag = true
					}
				}			
			}			 		
		}
		
		if(bus_flag && bicycle_flag){
			for (busID : busIDList) {
				emit(new WarnOBU(busID))
			}
		} else if (!bicycle_flag) {
			emit(new tempClean)
		}				
	}	
	
	def almostEqual(a : double, b : double, eps : double){		
		return Math.abs(a-b) < eps		
	}
	
	on OBUDisconnect{		
		removeOBU(occurrence.name)
	}
	
	on OBUConnect{		
		addOBU(occurrence.name)
	}
	
	on RSUConnect{	
		addRSU(occurrence.RSUAgent) //Adding the *RSU* that is spawned in the default context	
	}
	
	on CameraConnect{	
		addCamera(occurrence.CameraAgent) // Adding the *Camera* that is spawned in the default context	
	}
	
	def removeOBU(name : String) {
		this.allOBU.remove(name)
	}
	
	def addOBU(name : String) {
		this.allOBU.add(name)
	}
	
	def addRSU(element : RSU) {
		this.allRSU.add(element)
		println("RSU Connected to the Controller!")
	}

	def addCamera(element : Camera) {
		this.allCamera.add(element)
		println("Camera Connected to the Controller!")
	}
}
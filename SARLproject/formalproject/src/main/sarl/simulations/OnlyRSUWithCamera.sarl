package simulations

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import de.tudresden.sumo.cmd.Vehicle
import de.tudresden.sumo.cmd.Junction
import it.polito.appeal.traci.SumoTraciConnection
import io.sarl.core.DefaultContextInteractions
import java.util.List
import de.tudresden.ws.container.SumoPosition2D
import java.util.HashMap
import simulations.ControllerRSUWCAM
import objects.*
import kpi.Kpi

/** 
 * @author 20184729
 * 
 */
agent OnlyRSUWithCamera {

	var conn : SumoTraciConnection

	var RsusStatus = new HashMap<String, Boolean>
	var rsu_distance = 13.0
	var cyclist_range = 5.0
	var counter : int = 0
	
	var flag : boolean = false

	uses Lifecycle, Schedules, DefaultContextInteractions

	var kpis : Kpi

	on Initialize {

		this.conn = occurrence.parameters.get(0) as SumoTraciConnection
		this.kpis = occurrence.parameters.get(1) as Kpi

		spawnElements

		run
	}

	def run {

		val task = task("sumo running")
		task.every(50) [
			
			this.conn.do_timestep();
			kpis.checkKPIs();

			var vehicles : List<String> = this.conn.do_job_get(Vehicle.getIDList()) as List<String>

			for (v : vehicles) {
				var veh_data = readData(v)
				var type = veh_data.get("type") as String

				if (type.contains("bicycle-distracted")) {
					var distance = veh_data.get("distance") as Double
					var speed = veh_data.get("speed") as Double
					var east_rsu = this.RsusStatus.get("East") as Boolean
					var road_id = veh_data.get("road_id") as String
					if (east_rsu && road_id.contains("i")) {
						if (distance > rsu_distance && distance < rsu_distance + cyclist_range) {
							this.conn.do_job_set(Vehicle.setSpeed(v, 0.0))
						}
					} else {
						if (speed == 0) {
							this.conn.do_job_set(Vehicle.setSpeed(v, 4.2))
						}
					}
				}
			}

		]

	}


	def spawnElements {
		spawn(ControllerRSUWCAM, this.conn)
		spawn(RSU, "East", 15.5, -10.5, this.conn) // EAST X, Y
		spawn(Camera, "CameraOne", this.conn, -15.0, 0.0, 2.0, 0.7, 4) // CameraName, Connection, X, Y, Size, Height, Angle
		
	}

	def readData(id : String) {
		var position : SumoPosition2D = this.conn.do_job_get(Vehicle.getPosition(id)) as SumoPosition2D
		var centre = this.conn.do_job_get(Junction.getPosition("0")) as SumoPosition2D
		var type : String = this.conn.do_job_get(Vehicle.getTypeID(id)) as String
		var speed : double = this.conn.do_job_get(Vehicle.getSpeed(id)) as Double
		var length : double = this.conn.do_job_get(Vehicle.getLength(id)) as Double
		var accel : double = this.conn.do_job_get(Vehicle.getAccel(id)) as Double
		var road_id : String = this.conn.do_job_get(Vehicle.getRoadID(id)) as String
		var tempx : double = Math.abs(centre.x - position.x)
		var tempy : double = Math.abs(centre.y - position.y)
		var distance = Math.sqrt(tempx * tempx + tempy * tempy)
		distance = distance - length / 2
		var myMap : HashMap<String, Object> = newHashMap(
			'type' -> type,
			'speed' -> speed,
			'accel' -> accel,
			'distance' -> distance,
			'road_id' -> road_id,
			'length' -> length
		)
		return myMap
	}

	def calcDeceleration(init_speed : Double, final_speed : Double, remaining_dist : Double) {
		var acc = ( (8 * remaining_dist) / ( (init_speed + final_speed) * (init_speed + final_speed) ) ) -
			( (4 * init_speed) / (init_speed + final_speed) )
		return -acc
	}

	on Destroy {
		println("Destroyed")
	}
}